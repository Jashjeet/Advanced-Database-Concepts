postgres=# \i C:/Users/jashj/OneDrive/'Semester 2'/'Advanced Database Concepts'/'Assignment 6'/'jsmadan_Assignment_6.sql'
CREATE DATABASE
You are now connected to database "assignment6jashjeet" as user "postgres".
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
Part 2
CREATE FUNCTION
CREATE FUNCTION
psql:C:/Users/jashj/OneDrive/Semester 2/Advanced Database Concepts/Assignment 6/jsmadan_Assignment_6.sql:217: NOTICE:  table "ra" does not exist, skipping
psql:C:/Users/jashj/OneDrive/Semester 2/Advanced Database Concepts/Assignment 6/jsmadan_Assignment_6.sql:217: NOTICE:  table "rb" does not exist, skipping
psql:C:/Users/jashj/OneDrive/Semester 2/Advanced Database Concepts/Assignment 6/jsmadan_Assignment_6.sql:217: NOTICE:  table "r" does not exist, skipping
 makerandomr
-------------

(1 row)


psql:C:/Users/jashj/OneDrive/Semester 2/Advanced Database Concepts/Assignment 6/jsmadan_Assignment_6.sql:218: NOTICE:  table "sb" does not exist, skipping
psql:C:/Users/jashj/OneDrive/Semester 2/Advanced Database Concepts/Assignment 6/jsmadan_Assignment_6.sql:218: NOTICE:  table "s" does not exist, skipping
 makerandoms
-------------

(1 row)


Question 7
Non Optimized query
Query 3
                                                                 QUERY PLAN                                             
--------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=527967.08..527969.08 rows=200 width=4) (actual time=971.761..971.793 rows=500 loops=1)
   Group Key: r1.a
   ->  Merge Join  (cost=66429.86..462225.15 rows=26296772 width=4) (actual time=88.480..561.921 rows=3997172 loops=1)
         Merge Cond: (r3.a = r2.b)
         ->  Sort  (cost=823.62..849.04 rows=10170 width=4) (actual time=3.364..4.561 rows=10000 loops=1)
               Sort Key: r3.a
               Sort Method: quicksort  Memory: 853kB
               ->  Seq Scan on r r3  (cost=0.00..146.70 rows=10170 width=4) (actual time=0.056..1.164 rows=10000 loops=1)
         ->  Materialize  (cost=65606.24..68191.96 rows=517144 width=8) (actual time=85.112..232.060 rows=3997150 loops=1)
               ->  Sort  (cost=65606.24..66899.10 rows=517144 width=8) (actual time=85.107..100.237 rows=199977 loops=1)                     Sort Key: r2.b
                     Sort Method: external merge  Disk: 3544kB
                     ->  Merge Join  (cost=1647.23..9455.24 rows=517144 width=8) (actual time=4.321..33.531 rows=199977 loops=1)
                           Merge Cond: (r1.b = r2.a)
                           ->  Sort  (cost=823.62..849.04 rows=10170 width=8) (actual time=2.252..3.340 rows=10000 loops=1)
                                 Sort Key: r1.b
                                 Sort Method: quicksort  Memory: 853kB
                                 ->  Seq Scan on r r1  (cost=0.00..146.70 rows=10170 width=8) (actual time=0.012..0.561 rows=10000 loops=1)
                           ->  Sort  (cost=823.62..849.04 rows=10170 width=8) (actual time=2.066..8.865 rows=199954 loops=1)
                                 Sort Key: r2.a
                                 Sort Method: quicksort  Memory: 853kB
                                 ->  Seq Scan on r r2  (cost=0.00..146.70 rows=10170 width=8) (actual time=0.010..0.556 rows=10000 loops=1)
 Planning Time: 0.640 ms
 Execution Time: 973.686 ms
(24 rows)


Optimized query
Query 4
                                                                    QUERY PLAN                                          
--------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=583.90..585.90 rows=200 width=4) (actual time=9.005..9.041 rows=500 loops=1)
   Group Key: r1.a
   ->  Hash Join  (cost=384.51..558.48 rows=10170 width=4) (actual time=5.765..7.790 rows=10000 loops=1)
         Hash Cond: (r1.b = r2.a)
         ->  Seq Scan on r r1  (cost=0.00..146.70 rows=10170 width=8) (actual time=0.012..0.575 rows=10000 loops=1)
         ->  Hash  (cost=382.01..382.01 rows=200 width=4) (actual time=5.744..5.744 rows=500 loops=1)
               Buckets: 1024  Batches: 1  Memory Usage: 26kB
               ->  HashAggregate  (cost=378.01..380.01 rows=200 width=4) (actual time=5.650..5.688 rows=500 loops=1)
                     Group Key: r2.a
                     ->  Hash Join  (cost=178.63..352.59 rows=10170 width=4) (actual time=2.168..4.326 rows=10000 loops=1)
                           Hash Cond: (r2.b = r3.a)
                           ->  Seq Scan on r r2  (cost=0.00..146.70 rows=10170 width=8) (actual time=0.008..0.568 rows=10000 loops=1)
                           ->  Hash  (cost=176.13..176.13 rows=200 width=4) (actual time=2.149..2.149 rows=500 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 26kB
                                 ->  HashAggregate  (cost=172.13..174.13 rows=200 width=4) (actual time=2.057..2.097 rows=500 loops=1)
                                       Group Key: r3.a
                                       ->  Seq Scan on r r3  (cost=0.00..146.70 rows=10170 width=4) (actual time=0.006..0.682 rows=10000 loops=1)
 Planning Time: 0.113 ms
 Execution Time: 9.159 ms
(19 rows)


Question 8
Non Optimized query
Query 5
                                                     QUERY PLAN
---------------------------------------------------------------------------------------------------------------------
 Hash Anti Join  (cost=277.56..364.22 rows=1275 width=4) (actual time=2.548..2.617 rows=500 loops=1)
   Hash Cond: (ra.a = r.a)
   ->  Seq Scan on ra  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.037..0.062 rows=500 loops=1)
   ->  Hash  (cost=214.00..214.00 rows=5085 width=4) (actual time=2.448..2.448 rows=0 loops=1)
         Buckets: 8192  Batches: 1  Memory Usage: 64kB
         ->  Seq Scan on r  (cost=41.88..214.00 rows=5085 width=4) (actual time=2.448..2.448 rows=0 loops=1)
               Filter: (NOT (hashed SubPlan 1))
               Rows Removed by Filter: 10000
               SubPlan 1
                 ->  Seq Scan on s  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.027..0.052 rows=500 loops=1)
 Planning Time: 1.712 ms
 Execution Time: 2.694 ms
(12 rows)


Optimized query
Query 6
                                                                                 QUERY PLAN                             
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashSetOp Except  (cost=0.00..6652.02 rows=200 width=8) (actual time=14.086..14.114 rows=500 loops=1)
   ->  Append  (cost=0.00..6613.23 rows=15517 width=8) (actual time=0.020..13.939 rows=500 loops=1)
         ->  Subquery Scan on "*SELECT* 1"  (cost=0.00..61.00 rows=2550 width=8) (actual time=0.019..0.088 rows=500 loops=1)
               ->  Seq Scan on ra  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.017..0.045 rows=500 loops=1)
         ->  Subquery Scan on "*SELECT* 2"  (cost=6145.38..6474.64 rows=12967 width=8) (actual time=13.817..13.817 rows=0 loops=1)
               ->  Merge Join  (cost=6145.38..6344.97 rows=12967 width=4) (actual time=13.817..13.817 rows=0 loops=1)
                     Merge Cond: (q1.a = ra_1.a)
                     ->  Sort  (cost=5965.60..5968.14 rows=1017 width=4) (actual time=13.816..13.816 rows=0 loops=1)
                           Sort Key: q1.a
                           Sort Method: quicksort  Memory: 25kB
                           ->  Subquery Scan on q1  (cost=0.00..5914.80 rows=1017 width=4) (actual time=13.813..13.813 rows=0 loops=1)
                                 ->  HashSetOp Except  (cost=0.00..5904.63 rows=1017 width=12) (actual time=13.813..13.813 rows=0 loops=1)
                                       ->  Append  (cost=0.00..5205.44 rows=139838 width=12) (actual time=0.011..8.666 rows=20000 loops=1)
                                             ->  Subquery Scan on "*SELECT* 1_1"  (cost=0.00..248.40 rows=10170 width=12) (actual time=0.010..2.059 rows=10000 loops=1)
                                                   ->  Seq Scan on r r1  (cost=0.00..146.70 rows=10170 width=8) (actual time=0.010..0.874 rows=10000 loops=1)
                                             ->  Subquery Scan on "*SELECT* 2_1"  (cost=1003.40..4257.85 rows=129668 width=12) (actual time=3.093..5.437 rows=10000 loops=1)
                                                   ->  Merge Join  (cost=1003.40..2961.17 rows=129668 width=8) (actual time=3.093..4.781 rows=10000 loops=1)
                                                         Merge Cond: (s1.b = r2.b)
                                                         ->  Sort  (cost=179.78..186.16 rows=2550 width=4) (actual time=0.152..0.185 rows=500 loops=1)
                                                               Sort Key: s1.b
                                                               Sort Method: quicksort  Memory: 48kB
                                                               ->  Seq Scan on s s1  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.028..0.075 rows=500 loops=1)
                                                         ->  Sort  (cost=823.62..849.04 rows=10170 width=8) (actual time=2.937..3.467 rows=10000 loops=1)
                                                               Sort Key: r2.b
                                                               Sort Method: quicksort  Memory: 853kB
                                                               ->  Seq Scan on r r2  (cost=0.00..146.70 rows=10170 width=8) (actual time=0.010..0.765 rows=10000 loops=1)
                     ->  Sort  (cost=179.78..186.16 rows=2550 width=4) (never executed)
                           Sort Key: ra_1.a
                           ->  Seq Scan on ra ra_1  (cost=0.00..35.50 rows=2550 width=4) (never executed)
 Planning Time: 0.217 ms
 Execution Time: 14.599 ms
(31 rows)


Question 9
Non Optimized query
Query 7
                                                    QUERY PLAN
------------------------------------------------------------------------------------------------------------------
 Nested Loop Anti Join  (cost=0.00..280286390.52 rows=1275 width=4) (actual time=315.522..315.522 rows=0 loops=1)
   Join Filter: (NOT (SubPlan 1))
   Rows Removed by Join Filter: 18
   ->  Seq Scan on ra  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.017..0.077 rows=500 loops=1)
   ->  Materialize  (cost=0.00..48.25 rows=2550 width=4) (actual time=0.000..0.000 rows=1 loops=500)
         ->  Seq Scan on s  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.009..0.009 rows=2 loops=1)
   SubPlan 1
     ->  Seq Scan on r  (cost=0.00..172.13 rows=51 width=4) (actual time=0.033..0.602 rows=20 loops=518)
           Filter: (a = ra.a)
           Rows Removed by Filter: 9789
 Planning Time: 0.090 ms
 Execution Time: 315.540 ms
(12 rows)


Optimized query
Query 8
                                                                              QUERY PLAN                                
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashSetOp Except  (cost=0.00..284618.50 rows=200 width=8) (actual time=231.252..231.252 rows=0 loops=1)
   ->  Append  (cost=0.00..284512.13 rows=42550 width=8) (actual time=0.045..210.972 rows=240500 loops=1)
         ->  Subquery Scan on "*SELECT* 1"  (cost=0.00..61.00 rows=2550 width=8) (actual time=0.044..0.122 rows=500 loops=1)
               ->  Seq Scan on ra  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.043..0.086 rows=500 loops=1)
         ->  Subquery Scan on "*SELECT* 2"  (cost=0.00..284238.38 rows=40000 width=8) (actual time=143.851..202.281 rows=240000 loops=1)
               ->  Subquery Scan on q  (cost=0.00..283838.38 rows=40000 width=4) (actual time=143.851..188.783 rows=240000 loops=1)
                     ->  HashSetOp Except  (cost=0.00..283438.38 rows=40000 width=12) (actual time=143.850..174.364 rows=240000 loops=1)
                           ->  Append  (cost=0.00..242659.54 rows=8155767 width=12) (actual time=0.025..67.815 rows=260000 loops=1)
                                 ->  Subquery Scan on "*SELECT* 1_1"  (cost=0.00..146383.63 rows=6502500 width=12) (actual time=0.024..46.667 rows=250000 loops=1)
                                       ->  Nested Loop  (cost=0.00..81358.63 rows=6502500 width=8) (actual time=0.024..29.747 rows=250000 loops=1)
                                             ->  Seq Scan on s  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.012..0.080 rows=500 loops=1)
                                             ->  Materialize  (cost=0.00..48.25 rows=2550 width=4) (actual time=0.000..0.018 rows=500 loops=500)
                                                   ->  Seq Scan on ra ra_1  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.008..0.026 rows=500 loops=1)
                                 ->  Subquery Scan on "*SELECT* 2_1"  (cost=14152.66..55497.08 rows=1653267 width=12) (actual time=7.242..10.248 rows=10000 loops=1)
                                       ->  Merge Join  (cost=14152.66..38964.41 rows=1653267 width=8) (actual time=7.242..9.509 rows=10000 loops=1)
                                             Merge Cond: (ra_2.a = r.a)
                                             ->  Sort  (cost=179.78..186.16 rows=2550 width=4) (actual time=0.083..0.132 rows=500 loops=1)
                                                   Sort Key: ra_2.a
                                                   Sort Method: quicksort  Memory: 48kB
                                                   ->  Seq Scan on ra ra_2  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.023..0.045 rows=500 loops=1)
                                             ->  Sort  (cost=13972.88..14297.05 rows=129668 width=8) (actual time=7.156..8.069 rows=10000 loops=1)
                                                   Sort Key: r.a
                                                   Sort Method: quicksort  Memory: 853kB
                                                   ->  Merge Join  (cost=1003.40..2961.17 rows=129668 width=8) (actual time=3.376..5.077 rows=10000 loops=1)
                                                         Merge Cond: (s_1.b = r.b)
                                                         ->  Sort  (cost=179.78..186.16 rows=2550 width=4) (actual time=0.095..0.126 rows=500 loops=1)
                                                               Sort Key: s_1.b
                                                               Sort Method: quicksort  Memory: 48kB
                                                               ->  Seq Scan on s s_1  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.010..0.031 rows=500 loops=1)
                                                         ->  Sort  (cost=823.62..849.04 rows=10170 width=8) (actual time=3.279..3.797 rows=10000 loops=1)
                                                               Sort Key: r.b
                                                               Sort Method: quicksort  Memory: 853kB
                                                               ->  Seq Scan on r  (cost=0.00..146.70 rows=10170 width=8) (actual time=0.011..0.887 rows=10000 loops=1)
 Planning Time: 0.238 ms
 Execution Time: 236.588 ms
(35 rows)


Question 10
Query 9
                                                                    QUERY PLAN                                          
---------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=1497.38..1499.39 rows=201 width=4) (actual time=15.432..15.469 rows=500 loops=1)
   Group Key: r.a
   ->  Append  (cost=1009.77..1496.87 rows=201 width=4) (actual time=2.499..15.264 rows=500 loops=1)
         ->  Subquery Scan on r  (cost=1009.77..1089.06 rows=1 width=4) (actual time=2.499..12.448 rows=500 loops=1)
               InitPlan 1 (returns $0)
                 ->  Sort  (cost=179.78..186.16 rows=2550 width=4) (actual time=0.170..0.183 rows=500 loops=1)
                       Sort Key: s.b
                       Sort Method: quicksort  Memory: 48kB
                       ->  Seq Scan on s  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.013..0.038 rows=500 loops=1)
               ->  GroupAggregate  (cost=823.62..902.89 rows=1 width=36) (actual time=2.498..12.405 rows=500 loops=1)
                     Group Key: r_1.a
                     Filter: (array_agg(r_1.b ORDER BY 1::integer) <@ $0)
                     ->  Sort  (cost=823.62..849.04 rows=10170 width=8) (actual time=2.256..3.070 rows=10000 loops=1)
                           Sort Key: r_1.a
                           Sort Method: quicksort  Memory: 853kB
                           ->  Seq Scan on r r_1  (cost=0.00..146.70 rows=10170 width=8) (actual time=0.011..0.616 rows=10000 loops=1)
         ->  Result  (cost=0.00..406.80 rows=200 width=4) (actual time=2.791..2.791 rows=0 loops=1)
               ->  HashSetOp Except  (cost=0.00..404.80 rows=200 width=8) (actual time=2.791..2.791 rows=0 loops=1)
                     ->  Append  (cost=0.00..373.00 rows=12720 width=8) (actual time=0.020..1.805 rows=10500 loops=1)
                           ->  Subquery Scan on "*SELECT* 2"  (cost=0.00..61.00 rows=2550 width=8) (actual time=0.019..0.074 rows=500 loops=1)
                                 ->  Seq Scan on ra  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.018..0.040 rows=500 loops=1)
                           ->  Subquery Scan on "*SELECT* 3"  (cost=0.00..248.40 rows=10170 width=8) (actual time=0.012..1.342 rows=10000 loops=1)
                                 ->  Seq Scan on r r_2  (cost=0.00..146.70 rows=10170 width=4) (actual time=0.012..0.708 rows=10000 loops=1)
 Planning Time: 0.128 ms
 Execution Time: 15.688 ms
(25 rows)


Question 11
Query 10
                                                        QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on r  (cost=1009.77..1089.06 rows=1 width=4) (actual time=6.571..6.571 rows=0 loops=1)
   InitPlan 1 (returns $0)
     ->  Sort  (cost=179.78..186.16 rows=2550 width=4) (actual time=0.089..0.103 rows=500 loops=1)
           Sort Key: s.b
           Sort Method: quicksort  Memory: 48kB
           ->  Seq Scan on s  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.010..0.032 rows=500 loops=1)
   ->  GroupAggregate  (cost=823.62..902.89 rows=1 width=36) (actual time=6.570..6.570 rows=0 loops=1)
         Group Key: r_1.a
         Filter: ($0 <@ array_agg(r_1.b ORDER BY 1::integer))
         Rows Removed by Filter: 500
         ->  Sort  (cost=823.62..849.04 rows=10170 width=8) (actual time=2.314..2.983 rows=10000 loops=1)
               Sort Key: r_1.a
               Sort Method: quicksort  Memory: 853kB
               ->  Seq Scan on r r_1  (cost=0.00..146.70 rows=10170 width=8) (actual time=0.016..0.654 rows=10000 loops=1)
 Planning Time: 0.104 ms
 Execution Time: 6.744 ms
(16 rows)


Question 12 (a)
CREATE FUNCTION
Question 12 (b)
CREATE FUNCTION
Question 13
CREATE VIEW
 sid  |                        books
------+-----------------------------------------------------
 1001 | {2002,2007,2009,2011,2013}
 1002 | {2001,2002,2007,2011,2012,2013}
 1003 | {2002,2007,2011,2012,2013}
 1004 | {2006,2007,2008,2011,2012,2013}
 1005 | {2007,2011,2012,2013}
 1006 | {2006,2007,2008,2011,2012,2013}
 1007 | {2001,2002,2003,2007,2008,2009,2010,2011,2012,2013}
 1008 | {2007,2011,2012,2013}
 1009 | {2001,2002,2011,2012,2013}
 1010 | {2001,2002,2003,2011,2012,2013}
 1011 | {2002,2011,2012}
 1012 | {2011,2012}
 1013 | {2001,2011,2012}
 1014 | {2008,2011,2012}
 1015 | {}
 1016 | {}
 1017 | {2001,2002,2003,2008,2012}
 1020 | {2012}
(18 rows)


Question 13 (a)
CREATE VIEW
 bookno |                                   students
--------+------------------------------------------------------------------------------
   2001 | {1002,1007,1009,1010,1013,1017}
   2002 | {1001,1002,1003,1007,1009,1010,1011,1017}
   2003 | {1007,1010,1017}
   2004 | {}
   2005 | {}
   2006 | {1004,1006}
   2007 | {1001,1002,1003,1004,1005,1006,1007,1008}
   2008 | {1004,1006,1007,1014,1017}
   2009 | {1001,1007}
   2010 | {1007}
   2011 | {1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014}
   2012 | {1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1017,1020}
   2013 | {1001,1002,1003,1004,1005,1006,1007,1008,1009,1010}
   3000 | {}
(14 rows)


Question 13 (b)
CREATE VIEW
 bookno |    citedbooks
--------+------------------
   2001 | {2002,2007}
   2002 | {2003}
   2003 | {2001,2002,2004}
   2004 | {}
   2005 | {}
   2006 | {}
   2007 | {}
   2008 | {2011,2012}
   2009 | {}
   2010 | {}
   2011 | {}
   2012 | {2001,2005}
   2013 | {}
   3000 | {}
(14 rows)


Question 13 (c)
CREATE VIEW
 bookno | citingbooks
--------+-------------
   2001 | {2003,2012}
   2002 | {2001,2003}
   2003 | {2002}
   2004 | {2003}
   2005 | {2012}
   2006 | {}
   2007 | {2001}
   2008 | {}
   2009 | {}
   2010 | {}
   2011 | {2008}
   2012 | {2008}
   2013 | {}
   3000 | {}
(14 rows)


Question 13 (d)
CREATE VIEW
    major     |               students
--------------+--------------------------------------
 Math         | {1001,1002,1003,1011}
 Theater      | {1014}
 Physics      | {1001,1007,1008}
 Anthropology | {1017}
 CS           | {1002,1004,1006,1007,1011,1012,1013}
 Psychology   | {1013}
 Biology      | {1009,1010}
(7 rows)


Question 13 (e)
CREATE VIEW
 sid  |     majors
------+-----------------
 1001 | {Math,Physics}
 1002 | {CS,Math}
 1003 | {Math}
 1004 | {CS}
 1005 | {}
 1006 | {CS}
 1007 | {CS,Physics}
 1008 | {Physics}
 1009 | {Biology}
 1010 | {Biology}
 1011 | {CS,Math}
 1012 | {CS}
 1013 | {CS,Psychology}
 1014 | {Theater}
 1015 | {}
 1016 | {}
 1017 | {Anthropology}
 1020 | {}
(18 rows)


'Question 14'
Question 14 (a)
 bookno |  title
--------+----------
   2003 | Networks
(1 row)


Question 14 (b)
 bookno |        title
--------+---------------------
   2004 | AI
   2005 | DiscreteMathematics
   3000 | MachineLearning
(3 rows)


Question 14 (c)
 sid
------
 1004
 1006
 1007
 1014
(4 rows)


Question 14 (d)
 bookno
--------
   2001
   2002
   2003
   2007
   2008
   2009
   2011
   2012
   2013
(9 rows)


Question 14 (e)
 bookno |        title
--------+----------------------
   2001 | Databases
   2002 | OperatingSystems
   2003 | Networks
   2007 | ProgrammingLanguages
   2008 | DataScience
   2009 | Calculus
   2011 | Anthropology
   2012 | Geometry
   2013 | RealAnalysis
(9 rows)


Question 14 (f)
 sid  | bookno
------+--------
 1001 |   2001
 1001 |   2002
 1001 |   2003
 1001 |   2004
 1001 |   2005
 1001 |   2006
 1001 |   2007
 1001 |   2008
 1001 |   2009
 1001 |   2010
 1001 |   2011
 1001 |   2012
 1001 |   2013
 1001 |   3000
 1002 |   2001
 1002 |   2002
 1002 |   2003
 1002 |   2004
 1002 |   2005
 1002 |   2006
 1002 |   2007
 1002 |   2008
 1002 |   2009
 1002 |   2010
 1002 |   2011
 1002 |   2012
 1002 |   2013
 1002 |   3000
 1003 |   2001
 1003 |   2002
 1003 |   2003
 1003 |   2004
 1003 |   2005
 1003 |   2006
 1003 |   2007
 1003 |   2008
 1003 |   2009
 1003 |   2010
 1003 |   2011
 1003 |   2012
 1003 |   2013
 1003 |   3000
 1004 |   2001
 1004 |   2002
 1004 |   2003
 1004 |   2004
 1004 |   2005
 1004 |   2006
 1004 |   2007
 1004 |   2008
 1004 |   2009
 1004 |   2010
 1004 |   2011
 1004 |   2012
 1004 |   2013
 1004 |   3000
 1005 |   2001
 1005 |   2002
 1005 |   2003
 1005 |   2004
 1005 |   2005
 1005 |   2006
 1005 |   2007
 1005 |   2008
 1005 |   2009
 1005 |   2010
 1005 |   2011
 1005 |   2012
 1005 |   2013
 1005 |   3000
 1006 |   2001
 1006 |   2002
 1006 |   2003
 1006 |   2004
 1006 |   2005
 1006 |   2006
 1006 |   2007
 1006 |   2008
 1006 |   2009
 1006 |   2010
 1006 |   2011
 1006 |   2012
 1006 |   2013
 1006 |   3000
 1007 |   2001
 1007 |   2002
 1007 |   2003
 1007 |   2004
 1007 |   2005
 1007 |   2006
 1007 |   2007
 1007 |   2008
 1007 |   2009
 1007 |   2010
 1007 |   2011
 1007 |   2012
 1007 |   2013
 1007 |   3000
 1008 |   2001
 1008 |   2002
 1008 |   2003
 1008 |   2004
 1008 |   2005
 1008 |   2006
 1008 |   2007
 1008 |   2008
 1008 |   2009
 1008 |   2010
 1008 |   2011
 1008 |   2012
 1008 |   2013
 1008 |   3000
 1009 |   2001
 1009 |   2002
 1009 |   2003
 1009 |   2004
 1009 |   2005
 1009 |   2006
 1009 |   2007
 1009 |   2008
 1009 |   2009
 1009 |   2010
 1009 |   2011
 1009 |   2012
 1009 |   2013
 1009 |   3000
 1010 |   2001
 1010 |   2002
 1010 |   2003
 1010 |   2004
 1010 |   2005
 1010 |   2006
 1010 |   2007
 1010 |   2008
 1010 |   2009
 1010 |   2010
 1010 |   2011
 1010 |   2012
 1010 |   2013
 1010 |   3000
 1011 |   2001
 1011 |   2002
 1011 |   2003
 1011 |   2004
 1011 |   2005
 1011 |   2006
 1011 |   2007
 1011 |   2008
 1011 |   2009
 1011 |   2010
 1011 |   2011
 1011 |   2012
 1011 |   2013
 1011 |   3000
 1012 |   2001
 1012 |   2002
 1012 |   2003
 1012 |   2004
 1012 |   2005
 1012 |   2006
 1012 |   2007
 1012 |   2008
 1012 |   2009
 1012 |   2010
 1012 |   2011
 1012 |   2012
 1012 |   2013
 1012 |   3000
 1013 |   2001
 1013 |   2002
 1013 |   2003
 1013 |   2004
 1013 |   2005
 1013 |   2006
 1013 |   2007
 1013 |   2008
 1013 |   2009
 1013 |   2010
 1013 |   2011
 1013 |   2012
 1013 |   2013
 1013 |   3000
 1014 |   2001
 1014 |   2002
 1014 |   2003
 1014 |   2004
 1014 |   2005
 1014 |   2006
 1014 |   2007
 1014 |   2008
 1014 |   2009
 1014 |   2010
 1014 |   2011
 1014 |   2012
 1014 |   2013
 1014 |   3000
 1017 |   2001
 1017 |   2002
 1017 |   2003
 1017 |   2004
 1017 |   2005
 1017 |   2006
 1017 |   2007
 1017 |   2008
 1017 |   2009
 1017 |   2010
 1017 |   2011
 1017 |   2012
 1017 |   2013
 1017 |   3000
 1020 |   2002
 1020 |   2003
 1020 |   2004
 1020 |   2006
 1020 |   2007
 1020 |   2008
 1020 |   2009
 1020 |   2010
 1020 |   2011
 1020 |   2012
 1020 |   2013
 1020 |   3000
(222 rows)


Question 14 (g)
 bookno | bookno
--------+--------
   2001 |   2001
   2002 |   2002
   2003 |   2003
   2004 |   2004
   2005 |   2004
   3000 |   2004
   2004 |   2005
   2005 |   2005
   3000 |   2005
   2006 |   2006
   2007 |   2007
   2008 |   2008
   2009 |   2009
   2010 |   2010
   2011 |   2011
   2012 |   2012
   2013 |   2013
   2004 |   3000
   2005 |   3000
   3000 |   3000
(20 rows)


Question 14 (h)
 bookno | bookno
--------+--------
   2004 |   2004
   2004 |   3000
   2004 |   2005
   3000 |   2004
   3000 |   3000
   3000 |   2005
   2005 |   2004
   2005 |   3000
   2005 |   2005
   2010 |   2010
   2009 |   2009
   2009 |   2006
   2006 |   2009
   2006 |   2006
   2003 |   2003
   2008 |   2008
   2001 |   2001
   2007 |   2007
   2007 |   2002
   2002 |   2007
   2002 |   2002
   2013 |   2013
   2011 |   2011
   2012 |   2012
(24 rows)


Question 14 (i)
 sid
------
 1007
(1 row)


Question 14 (j)
 sid
------
 1011
 1012
 1013
 1014
 1015
 1016
 1020
(7 rows)


You are now connected to database "postgres" as user "postgres".
DROP DATABASE
postgres=#
postgres=#